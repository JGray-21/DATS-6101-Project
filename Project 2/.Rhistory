library(ezids)
library(pROC)
library(ModelMetrics)
# Some of common RMD options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
knitr::opts_chunk$set(results="markup", warning = F, message = F)
# Can globally set option for number display format.
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# 1. Do not provide answers/comments inside code blocks (like here) -- those are notes between coders/self and will be ignored for grading.
# 2. Make sure your knitr options are set to include all results/code to be graded in the final document.
# 3. All charts/graphs/tables should have appropriate titles/labels/captions.
# 4. Compose your answers using inline R code instead of using the code-block output as much as you can.
# 5. Your grade is also determined by the style. Even if you answer everything correctly, but the .html does not look appealing, you will not get full credit. Pay attention to the details that we mentioned in class/homework and in previous sample .Rmd files. For example, how to use #, ##, ###, ..., bold face, italics, inline codes, tables, ..., {results = "asis"}, use of colors in plots/ggplots, and so forth.
titanic_orig <- read.csv('Titanic.csv')
str(titanic_orig)
colSums(is.na(titanic_orig))
titanic_clean <- na.omit(titanic_orig)
str(titanic_clean)
titanic_clean$pclass <- factor(titanic_clean$pclass, order = T, levels = c(3, 2, 1), labels = c("3rd", "2nd", "1st"))
titanic_clean$sex <- factor(titanic_clean$sex, levels = c("male", "female"), labels = c("male", "female"))
titanic_clean$embarked <- factor(titanic_clean$embarked, levels = c("C", "S", "Q"), labels = c("Cherbourg", "Southampton", "Queenstown"))
str(titanic_clean)
# Ttest between survived and not survived
survived <- subset(titanic_clean, survived == 1)
not_survived <- subset(titanic_clean, survived == 0)
t.test(survived$age, mu=mean(not_survived$age))
t.test(not_survived$age, mu=mean(survived$age))
chi_sex <- chisq.test(titanic_clean$survived, titanic_clean$sex)
chi_sex
chi_sex$observed
chi_sex <- chisq.test(titanic_clean$survived, titanic_clean$pclass)
chi_sex
chi_sex$observed
titanic_model <- glm(survived ~ age + pclass, data=titanic_clean, family = 'binomial')
summary(titanic_model)
expcoef <- exp(coef(titanic_model))
expcoef
with(summary(titanic_model), 1 - deviance/null.deviance) # R squared
prob <- predict(titanic_model, type = "response" )
titanic_clean$prob=prob
h <- roc(survived~prob, data=titanic_clean)
plot(h)
h$auc
titanic_model <- glm(survived ~ age + pclass + sex, data=titanic_clean, family = 'binomial')
summary(titanic_model)
expcoef <- exp(coef(titanic_model))
expcoef
with(summary(titanic_model), 1 - deviance/null.deviance) # R squared
prob <- predict(titanic_model, type = "response" )
titanic_clean$prob=prob
h <- roc(survived~prob, data=titanic_clean)
plot(h)
h$auc
cm <- confusionMatrix(actual=titanic_model$y,predicted=titanic_model$fitted.values, cutoff = 0.5)
cm
TP <- cm[2,2]
FP <- cm[1, 2]
TN <- cm[1, 1]
FN <- cm[2, 1]
FPR = FP / (FP+TN)
FNR = FN / (FN+TP)
cm <- confusionMatrix(actual=titanic_model$y,predicted=titanic_model$fitted.values, cutoff = 0.38)
cm
TP <- cm[2,2]
FP <- cm[1, 2]
TN <- cm[1, 1]
FN <- cm[2, 1]
FPR = FP / (FP+TN)
FNR = FN / (FN+TP)
# The package "ezids" (EZ Intro to Data Science) includes some helper functions we developed for the course.
# Some of the frequently used functions are loadPkg(), xkabledply(), xkablesummary(), uzscale(), etc.
# You will need to install it (once) from GitHub.
# library(devtools)
# devtools::install_github("physicsland/ezids")
# Then load the package in your R session.
library(ezids)
library(pROC)
library(ModelMetrics)
# Some of common RMD options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
knitr::opts_chunk$set(results="markup", warning = F, message = F)
# Can globally set option for number display format.
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# 1. Do not provide answers/comments inside code blocks (like here) -- those are notes between coders/self and will be ignored for grading.
# 2. Make sure your knitr options are set to include all results/code to be graded in the final document.
# 3. All charts/graphs/tables should have appropriate titles/labels/captions.
# 4. Compose your answers using inline R code instead of using the code-block output as much as you can.
# 5. Your grade is also determined by the style. Even if you answer everything correctly, but the .html does not look appealing, you will not get full credit. Pay attention to the details that we mentioned in class/homework and in previous sample .Rmd files. For example, how to use #, ##, ###, ..., bold face, italics, inline codes, tables, ..., {results = "asis"}, use of colors in plots/ggplots, and so forth.
titanic_orig <- read.csv('Titanic.csv')
str(titanic_orig)
colSums(is.na(titanic_orig))
titanic_clean <- na.omit(titanic_orig)
str(titanic_clean)
titanic_clean$pclass <- factor(titanic_clean$pclass, order = T, levels = c(3, 2, 1), labels = c("3rd", "2nd", "1st"))
titanic_clean$sex <- factor(titanic_clean$sex, levels = c("male", "female"), labels = c("male", "female"))
titanic_clean$embarked <- factor(titanic_clean$embarked, levels = c("C", "S", "Q"), labels = c("Cherbourg", "Southampton", "Queenstown"))
str(titanic_clean)
# Ttest between survived and not survived
survived <- subset(titanic_clean, survived == 1)
not_survived <- subset(titanic_clean, survived == 0)
t.test(survived$age, mu=mean(not_survived$age))
t.test(not_survived$age, mu=mean(survived$age))
chi_sex <- chisq.test(titanic_clean$survived, titanic_clean$sex)
chi_sex
chi_sex$observed
chi_sex <- chisq.test(titanic_clean$survived, titanic_clean$pclass)
chi_sex
chi_sex$observed
titanic_model <- glm(survived ~ age + pclass, data=titanic_clean, family = 'binomial')
summary(titanic_model)
expcoef <- exp(coef(titanic_model))
expcoef
with(summary(titanic_model), 1 - deviance/null.deviance) # R squared
prob <- predict(titanic_model, type = "response" )
titanic_clean$prob=prob
h <- roc(survived~prob, data=titanic_clean)
plot(h)
h$auc
titanic_model <- glm(survived ~ age + pclass + sex, data=titanic_clean, family = 'binomial')
summary(titanic_model)
expcoef <- exp(coef(titanic_model))
expcoef
with(summary(titanic_model), 1 - deviance/null.deviance) # R squared
prob <- predict(titanic_model, type = "response" )
titanic_clean$prob=prob
h <- roc(survived~prob, data=titanic_clean)
plot(h)
h$auc
cm <- confusionMatrix(actual=titanic_model$y,predicted=titanic_model$fitted.values, cutoff = 0.5)
cm
TP <- cm[2,2]
FP <- cm[1, 2]
TN <- cm[1, 1]
FN <- cm[2, 1]
FPR = FP / (FP+TN)
FNR = FN / (FN+TP)
FPR
FNR
cm <- confusionMatrix(actual=titanic_model$y,predicted=titanic_model$fitted.values, cutoff = 0.38)
cm
TP <- cm[2,2]
FP <- cm[1, 2]
TN <- cm[1, 1]
FN <- cm[2, 1]
FPR = FP / (FP+TN)
FNR = FN / (FN+TP)
FPR
FNR
cm <- confusionMatrix(actual=titanic_model$y,predicted=titanic_model$fitted.values, cutoff = 0.38)
cm
TP <- cm[2,2]
FP <- cm[1, 2]
TN <- cm[1, 1]
FN <- cm[2, 1]
FPR = FP / (FP+TN)
FNR = FN / (FN+TP)
print("FPR = ", FPR)
cm <- confusionMatrix(actual=titanic_model$y,predicted=titanic_model$fitted.values, cutoff = 0.38)
cm
TP <- cm[2,2]
FP <- cm[1, 2]
TN <- cm[1, 1]
FN <- cm[2, 1]
FPR = FP / (FP+TN)
FNR = FN / (FN+TP)
print("FPR = " + FPR)
cm <- confusionMatrix(actual=titanic_model$y,predicted=titanic_model$fitted.values, cutoff = 0.38)
cm
TP <- cm[2,2]
FP <- cm[1, 2]
TN <- cm[1, 1]
FN <- cm[2, 1]
FPR = FP / (FP+TN)
FNR = FN / (FN+TP)
print("FPR = ")
FNR
cm <- confusionMatrix(actual=titanic_model$y,predicted=titanic_model$fitted.values, cutoff = 0.38)
cm
TP <- cm[2,2]
FP <- cm[1, 2]
TN <- cm[1, 1]
FN <- cm[2, 1]
FPR = FP / (FP+TN)
FNR = FN / (FN+TP)
print("FPR = ") + print(FPR)
cm <- confusionMatrix(actual=titanic_model$y,predicted=titanic_model$fitted.values, cutoff = 0.38)
cm
TP <- cm[2,2]
FP <- cm[1, 2]
TN <- cm[1, 1]
FN <- cm[2, 1]
FPR = FP / (FP+TN)
FNR = FN / (FN+TP)
print(paste("FPR = ", FPR))
FNR
cm <- confusionMatrix(actual=titanic_model$y,predicted=titanic_model$fitted.values, cutoff = 0.38)
cm
TP <- cm[2,2]
FP <- cm[1, 2]
TN <- cm[1, 1]
FN <- cm[2, 1]
FPR = FP / (FP+TN)
FNR = FN / (FN+TP)
print(paste("FPR = ", FPR))
print(paste("FNR = ", FNR))
library(gssr)
library(gssrdoc)
conflegis
?conflegit
str(gss_old)
?pres76
knitr::opts_chunk$set(warning = FALSE, echo = TRUE)
library(gssr)
library(gssrdoc)
library(ggplot2)
library(RColorBrewer)
library(dplyr)
library(ezids)
?pres76
?pres16
#Read in data frames and filter down to the variables we want
vars1 <- c('X', 'year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income', 'region', 'polviews', 'confed', 'pres76')
vars2 <- c('X', 'year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income16', 'region', 'polviews', 'confed', 'pres16')
gss_old <- read.csv("../gss74_80.csv")
gss_old <- gss_old[, vars1]
#Read in data frames and filter down to the variables we want
vars1 <- c('X', 'year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income', 'region', 'polviews', 'confed', 'Pres76')
vars2 <- c('X', 'year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income16', 'region', 'polviews', 'confed', 'Pres16')
gss_old <- read.csv("../gss74_80.csv")
gss_old <- gss_old[, vars1]
?pres76
gss1 <- read.csv("../gss74_80.csv")
vars1 <- c('X', 'year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income', 'region', 'polviews', 'confed', 'Pres76')
vars2 <- c('X', 'year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income16', 'region', 'polviews', 'confed', 'Pres16')
gss1 <- read.csv("../../gss74_80.csv")
gss1 <- read.csv("../gss74_80.csv")
gss1 <- read.csv("gss74_80.csv")
getwd()
setwd("~/Library/CloudStorage/OneDrive-TheGeorgeWashingtonUniversity/Fall 2024/DATS 6101 Intro to DS/Project 1/DATS-6101-Project/Project 2")
gss1 <- read.csv("../gss74_80.csv")
gss2 <- read.csv("../gss16_22.csv")
unique(gss1$pres76)
unique(gss1$year)
?pres16
y77 <- gss_get_yr(1977)
y78 <- gss_get_yr(1978)
y80 <- gss_get_yr(1980)
y82 <- gss_get_yr(1982)
y18 <- gss_get_yr(2018)
y21 <- gss_get_yr(2021)
y22 <- gss_get_yr(2022)
unique(y22$pres16)
gss <- merge(y77, y78, by='id')
gss <- merge(gss, y80, by='id')
gss <- merge(gss, y82, by='id')
gss <- merge(gss, y18, by='id')
gss <- merge(gss, y21, by='id')
gss <- merge(gss, y22, by='id')
y77 <- gss_get_yr(1977)
y78 <- gss_get_yr(1978)
y80 <- gss_get_yr(1980)
y82 <- gss_get_yr(1982)
y18 <- gss_get_yr(2018)
y21 <- gss_get_yr(2021)
y22 <- gss_get_yr(2022)
y77 <- y77[, vars1]
?X
vars1 <- c('year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income', 'region', 'polviews', 'confed', 'pres76')
vars2 <- c('year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income16', 'region', 'polviews', 'confed', 'pres16')
y77 <- y77[, vars1]
y78 <- y78[, vars1]
y80 <- y80[, vars1]
y82 <- y82[, vars1]
y18 <- y18[, vars2]
y21 <- y21[, vars2]
y22 <- y22[, vars2]
gss <- merge(y77, y78, by='id')
gss <- merge(gss, y80, by='id')
gss <- merge(gss, y82, by='id')
gss <- merge(gss, y18, by='id')
gss <- merge(gss, y21, by='id')
gss <- merge(gss, y22, by='id')
gss <- merge(y77, y78, by='id')
gss <- merge(gss, y80, by='id')
head(gss)
gss <- merge(y77, y78, by='id')
head(gss)
head(y77)
head(y78)
vars1 <- c('year', 'sex', 'age', 'race', 'relig', 'educ', 'income', 'region', 'polviews', 'confed', 'pres76')
vars2 <- c('year', 'sex', 'age', 'race', 'relig', 'educ', 'income16', 'region', 'polviews', 'confed', 'pres16')
y77 <- y77[, vars1]
y78 <- y78[, vars1]
y80 <- y80[, vars1]
y82 <- y82[, vars1]
y18 <- y18[, vars2]
y21 <- y21[, vars2]
y22 <- y22[, vars2]
gss <- merge(y77, y78, by='id')
gss <- merge(y77, y78)
head(gss)
gss <- merge(y77, y78)
head(gss)
View(gss)
View(y74)
View(y77)
vars1 <- c('year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income', 'region', 'polviews', 'confed', 'pres76')
vars2 <- c('year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income16', 'region', 'polviews', 'confed', 'pres16')
y77 <- y77[, vars1]
y77 <- gss_get_yr(1977)
y78 <- gss_get_yr(1978)
y80 <- gss_get_yr(1980)
y82 <- gss_get_yr(1982)
y18 <- gss_get_yr(2018)
y21 <- gss_get_yr(2021)
y22 <- gss_get_yr(2022)
vars1 <- c('year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income', 'region', 'polviews', 'confed', 'pres76')
vars2 <- c('year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income16', 'region', 'polviews', 'confed', 'pres16')
y77 <- y77[, vars1]
y78 <- y78[, vars1]
y80 <- y80[, vars1]
y82 <- y82[, vars1]
y18 <- y18[, vars2]
y21 <- y21[, vars2]
y22 <- y22[, vars2]
gss <- merge(y77, y78)
head(gss)
gss <- merge(y77, y78, on='year')
head(gss)
gss <- merge(y77, y78, by='year')
head(gss)
y77 <- gss_get_yr(1977)
y78 <- gss_get_yr(1978)
y80 <- gss_get_yr(1980)
y82 <- gss_get_yr(1982)
y18 <- gss_get_yr(2018)
y21 <- gss_get_yr(2021)
y22 <- gss_get_yr(2022)
#Filter variables
vars1 <- c('year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income', 'region', 'polviews', 'confed', 'pres76')
vars2 <- c('year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income16', 'region', 'polviews', 'confed', 'pres16')
y77 <- y77[, vars1]
y78 <- y78[, vars1]
y80 <- y80[, vars1]
y82 <- y82[, vars1]
y18 <- y18[, vars2]
y21 <- y21[, vars2]
y22 <- y22[, vars2]
head(y77)
gss <- merge(y77, y78, by='year')
head(gss)
gss <- merge(y77, y78, by='id')
head(gss)
common_77_82 <- Reduce(intersect, list(colnames(y77), colnames(y78), colnames(y80), colnames(y82)))
common_18_22 <- Reduce(intersect, list(colnames(y18), colnames(y21), colnames(y22)))
gss77_82 <- rbind(y77[common_77_82], y78[common_77_82], y80[common_77_82], y82[common_77_82])
gss18_22 <- rbind(y18[common_18_22], y21[common_18_22], y22[common_18_22])
head(gss77_82)
head(gss18_22)
gss77_82$era <- ifelse(TRUE, 0, 1)
gss18_22$era <- ifelse(TRUE, 1, 0)
head(gss77_82)
head(gss18_22)
colnames(gss77_82) <- c('year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income', 'region', 'polviews', 'confed', 'pres', 'era')
colnames(gss18_22) <- c('year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income', 'region', 'polviews', 'confed', 'pres', 'era')
head(gss77_82)
head(gss18_22)
?income
# Joshua Gray
#Read in data frames and filter down to the variables we want
y77 <- gss_get_yr(1977)
y78 <- gss_get_yr(1978)
y80 <- gss_get_yr(1980)
y82 <- gss_get_yr(1982)
y18 <- gss_get_yr(2018)
y21 <- gss_get_yr(2021)
y22 <- gss_get_yr(2022)
#Filter variables
vars1 <- c('year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income', 'region', 'polviews', 'confed', 'pres76')
vars2 <- c('year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income16', 'region', 'polviews', 'confed', 'pres16')
y77 <- y77[, vars1]
y78 <- y78[, vars1]
y80 <- y80[, vars1]
y82 <- y82[, vars1]
y18 <- y18[, vars2]
y21 <- y21[, vars2]
y22 <- y22[, vars2]
colnames(y18) <- c('year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income', 'region', 'polviews', 'confed', 'pres16')
colnames(y18) <- c('year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income', 'region', 'polviews', 'confed', 'pres16')
colnames(y18) <- c('year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income', 'region', 'polviews', 'confed', 'pres16')
common_77_82 <- Reduce(intersect, list(colnames(y77), colnames(y78), colnames(y80), colnames(y82)))
common_18_22 <- Reduce(intersect, list(colnames(y18), colnames(y21), colnames(y22)))
gss77_82 <- rbind(y77[common_77_82], y78[common_77_82], y80[common_77_82], y82[common_77_82])
gss18_22 <- rbind(y18[common_18_22], y21[common_18_22], y22[common_18_22])
gss77_82$era <- ifelse(TRUE, 0, 1)
gss18_22$era <- ifelse(TRUE, 1, 0)
colnames(gss77_82) <- c('year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income', 'region', 'polviews', 'confed', 'pres', 'era')
colnames(gss18_22) <- c('year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income', 'region', 'polviews', 'confed', 'pres', 'era')
head(gss77_82)
head(gss18_22)
# Joshua Gray
#Read in data frames and filter down to the variables we want
y77 <- gss_get_yr(1977)
y78 <- gss_get_yr(1978)
y80 <- gss_get_yr(1980)
y82 <- gss_get_yr(1982)
y18 <- gss_get_yr(2018)
y21 <- gss_get_yr(2021)
y22 <- gss_get_yr(2022)
#Filter variables
vars1 <- c('year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income', 'region', 'polviews', 'confed', 'pres76')
vars2 <- c('year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income16', 'region', 'polviews', 'confed', 'pres16')
y77 <- y77[, vars1]
y78 <- y78[, vars1]
y80 <- y80[, vars1]
y82 <- y82[, vars1]
y18 <- y18[, vars2]
y21 <- y21[, vars2]
y22 <- y22[, vars2]
colnames(y18) <- c('year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income', 'region', 'polviews', 'confed', 'pres16')
colnames(y21) <- c('year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income', 'region', 'polviews', 'confed', 'pres16')
colnames(y22) <- c('year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income', 'region', 'polviews', 'confed', 'pres16')
common_77_82 <- Reduce(intersect, list(colnames(y77), colnames(y78), colnames(y80), colnames(y82)))
common_18_22 <- Reduce(intersect, list(colnames(y18), colnames(y21), colnames(y22)))
gss77_82 <- rbind(y77[common_77_82], y78[common_77_82], y80[common_77_82], y82[common_77_82])
gss18_22 <- rbind(y18[common_18_22], y21[common_18_22], y22[common_18_22])
gss77_82$era <- ifelse(TRUE, 0, 1)
gss18_22$era <- ifelse(TRUE, 1, 0)
colnames(gss77_82) <- c('year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income', 'region', 'polviews', 'confed', 'pres', 'era')
colnames(gss18_22) <- c('year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income', 'region', 'polviews', 'confed', 'pres', 'era')
head(gss77_82)
head(gss18_22)
?pres76
?pres16
?pres76
gss <- rbind(gss77_82, gss18_22)
rlang::last_trace()
rlang::last_trace(drop = FALSE)
gss <- merge(gss77_82, gss18_22, by='id')
head(gss)
library(dplyr)
gss<- full_join(gss77_82, gss18_22)
head(gss)
unique(gss$pres)
?pres16
gss77_82$pres <- as.character(gss77_82$pres)
gss18_22$pres <- as.character(gss18_22$pres)
gss <- bind_rows(gss77_82, gss18_22)
head(gss)
gss[gss$pres == 2] <- 0
gss$pres[gss$pres == 2] <- 0
gss <- gss[polviews != 4]
gss <- gss[gss$polviews != 4]
gss <- gss[,polviews != 4]
gss <- gss[,gss$polviews != 4]
gss <- gss[gss$polviews != 4,]
unique(gss$polviews)
gss$pres[gss$pres == 1] <- 0
gss$pres[gss$pres == 2] <- 0
gss$pres[gss$pres == 3] <- 0
gss$pres[gss$pres == 5] <- 1
gss$pres[gss$pres == 6] <- 1
gss$pres[gss$pres == 7] <- 1
# Joshua Gray
#Read in data frames and filter down to the variables we want
y77 <- gss_get_yr(1977)
y78 <- gss_get_yr(1978)
y80 <- gss_get_yr(1980)
y82 <- gss_get_yr(1982)
y18 <- gss_get_yr(2018)
y21 <- gss_get_yr(2021)
y22 <- gss_get_yr(2022)
#Filter variables
vars1 <- c('year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income', 'region', 'polviews', 'confed', 'pres76')
vars2 <- c('year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income16', 'region', 'polviews', 'confed', 'pres16')
y77 <- y77[, vars1]
y78 <- y78[, vars1]
y80 <- y80[, vars1]
y82 <- y82[, vars1]
y18 <- y18[, vars2]
y21 <- y21[, vars2]
y22 <- y22[, vars2]
colnames(y18) <- c('year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income', 'region', 'polviews', 'confed', 'pres16')
colnames(y21) <- c('year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income', 'region', 'polviews', 'confed', 'pres16')
colnames(y22) <- c('year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income', 'region', 'polviews', 'confed', 'pres16')
common_77_82 <- Reduce(intersect, list(colnames(y77), colnames(y78), colnames(y80), colnames(y82)))
common_18_22 <- Reduce(intersect, list(colnames(y18), colnames(y21), colnames(y22)))
gss77_82 <- rbind(y77[common_77_82], y78[common_77_82], y80[common_77_82], y82[common_77_82])
gss18_22 <- rbind(y18[common_18_22], y21[common_18_22], y22[common_18_22])
gss77_82$era <- ifelse(TRUE, 0, 1)
gss18_22$era <- ifelse(TRUE, 1, 0)
colnames(gss77_82) <- c('year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income', 'region', 'polviews', 'confed', 'pres', 'era')
colnames(gss18_22) <- c('year', 'id', 'sex', 'age', 'race', 'relig', 'educ', 'income', 'region', 'polviews', 'confed', 'pres', 'era')
gss77_82$pres <- as.character(gss77_82$pres)
gss18_22$pres <- as.character(gss18_22$pres)
gss <- bind_rows(gss77_82, gss18_22)
gss$pres[gss$pres == 2] <- 0
gss <- gss[gss$polviews != 4,]
gss$polviews[gss$polviews == 1] <- 0
gss$polviews[gss$polviews == 2] <- 0
gss$polviews[gss$polviews == 3] <- 0
gss$polviews[gss$polviews == 5] <- 1
gss$polviews[gss$polviews == 6] <- 1
gss$polviews[gss$polviews == 7] <- 1
unique(gss$polviews)
unique(gss$confed)
gss$confed[gss$confed == 1] <- 0
gss$confed[gss$confed == 2] <- 0
gss$confed[gss$confed == 3] <- 1
write.csv(gss, 'GSS_data.csv')
