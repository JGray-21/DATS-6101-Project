cars
cars
install.packages("knitr")
library(knitr)
install.packages(devtools)
install.packages('devtools')
library(devtools)
devtools::install_github('physicsland/ezids')
devtools::install_github('physicsland/ezids')
?devtools::install_github('physicsland/ezids')
install_github
devtools::install_github('physicsland/ezids')
library(devtools)
devtools::install_github('physicsland/ezids')
if (!requireNamespace("remotes", quietly = TRUE)) { install.packages("remotes") }
devtools::install_github('physicsland/ezids')
devtools::install_github('physicsland/ezids')
devtools::install_github('physicsland/ezids')
Sys.setenv(GITHUB_PAT = "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")
devtools::install_github('physicsland/ezids')
install.packages('gssr', repos = c('https://kjhealy.r-universe.dev', 'https://cloud.r-project.org'))
install.packages('gssrdoc', repos = c('https://kjhealy.r-universe.dev', 'https://cloud.r-project.org'))
library(gssr)
gss18 <- gss_get_years(2018, 2016)
?gss_get_years(2018, 2016)
gss18 <- gss_get_years(2018, 2016)
gss18 gss_get_yr(2018)
gss18 <- gss_get_yr(2018)
head(gss18)
gss18 <- gss_get_yr(2016)
head(gss18)
test <- gss_get_yr(2017)
test <- gss_get_yr(2018)
library(gssr)
temp <- gss_get_yr(2017)
years <- c(1972, 1973, 1974, 1975, 1976, 1977, 1978, 1980, 1982, 1983, 1984, 1985,
1986, 1987, 1988, 1989, 1990, 1991, 1993, 1994, 1996, 1998, 2000, 2002,
2004, 2006, 2008, 2010, 2012, 2014, 2016, 2018)
print(x)
for(x in years) {
print(x)
}
install.packages('Dict')
library(gssr)
library(Dict)
years <- c(1972, 1973, 1974, 1975, 1976, 1977, 1978, 1980, 1982, 1983, 1984, 1985,
1986, 1987, 1988, 1989, 1990, 1991, 1993, 1994, 1996, 1998, 2000, 2002,
2004, 2006, 2008, 2010, 2012, 2014, 2016, 2018)
count <- Dict$new()
#for(x in years) {
#  temp <- gss_get_yr(x)
#}
library(gssr)
library(Dict)
years <- c(1972, 1973, 1974, 1975, 1976, 1977, 1978, 1980, 1982, 1983, 1984, 1985,
1986, 1987, 1988, 1989, 1990, 1991, 1993, 1994, 1996, 1998, 2000, 2002,
2004, 2006, 2008, 2010, 2012, 2014, 2016, 2018)
temp <- gss_get_yr(2018)
str(temp)
library(gssr)
library(Dict)
years <- c(1972, 1973, 1974, 1975, 1976, 1977, 1978, 1980, 1982, 1983, 1984, 1985,
1986, 1987, 1988, 1989, 1990, 1991, 1993, 1994, 1996, 1998, 2000, 2002,
2004, 2006, 2008, 2010, 2012, 2014, 2016, 2018)
temp <- gss_get_yr(2018)
names <- colnames(temp)
names
library(gssr)
library(Dict)
years <- c(1972, 1973, 1974, 1975, 1976, 1977, 1978, 1980, 1982, 1983, 1984, 1985,
1986, 1987, 1988, 1989, 1990, 1991, 1993, 1994, 1996, 1998, 2000, 2002,
2004, 2006, 2008, 2010, 2012, 2014, 2016, 2018)
vars <- c()
names
for(x in years) {
temp <- gss_get_yr(x)
vars <- c(vars, conlnames(temp))
}
library(gssr)
library(Dict)
years <- c(1972, 1973, 1974, 1975, 1976, 1977, 1978, 1980, 1982, 1983, 1984, 1985,
1986, 1987, 1988, 1989, 1990, 1991, 1993, 1994, 1996, 1998, 2000, 2002,
2004, 2006, 2008, 2010, 2012, 2014, 2016, 2018)
vars <- c()
names
for(x in years) {
temp <- gss_get_yr(x)
vars <- c(vars, colnames(temp))
}
table(vars)
as.data.frame(table(vars))
as.data.frame(sort(table(vars)))
as.data.frame(rle(sort(table(vars))))
df <- as.data.frame(rle(sort(table(vars))))
df <- as.data.frame(sort(table(vars)))
print(df[order(df$Freq, decreasing = TRUE)])
print(df[order(df$Freq, decreasing = TRUE)])
print(df[order(df$Freq)])
print(df[order(df[Freq])])
print(df[order(df[2])])
print(df[2])
View(df)
View(df)
library(gssr)
years <- c(1972, 1973, 1974, 1975, 1976, 1977, 1978, 1980, 1982, 1983, 1984, 1985,
1986, 1987, 1988, 1989, 1990, 1991, 1993, 1994, 1996, 1998, 2000, 2002,
2004, 2006, 2008, 2010, 2012, 2014, 2016, 2018)
vars <- c()
names
for(x in years) {
temp <- gss_get_yr(x)
vars <- c(vars, colnames(temp))
}
table(vars)
df <- as.data.frame(table(vars))
View(df)
View(df)
devtools::install_github("kjhealy/gssrdoc")
?sex
?fedtrust
library(gssrdoc)
?fedtrust
?poleff
?poleff11
?confed
?confedvacy
?confed
?sex
2+2
1.5*8
+ 60
-12 - 60
pnorm(.9)
?region
library(gssr)
library(gssrdoc)
?region
?polviews
?relig
data(gss_all)
str(gss_all)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
knitr::opts_chunk$set(warning = F, results = "markup", message = F)
# knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
xkabledply(anovaRes, title = "ANOVA result summary")
# The package "ezids" (EZ Intro to Data Science) includes a lot of the helper functions we developed for the course.
# Some of the frequently used functions are loadPkg(), xkabledply(), xkablesummary(), uzscale(), etc.
library(ezids)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
knitr::opts_chunk$set(warning = F, results = "markup", message = F)
# knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
library("MASS")
surveyPulseSmoke = subset(survey, Pulse>0 & !is.na(Smoke), select=c('Pulse','Smoke'))  # remove NAs
library("ggplot2")
ggplot(surveyPulseSmoke, aes(x=Smoke, y=Pulse)) +
geom_boxplot( colour=c("#ff0000","#11cc11","#0000ff","#ff00ff"), outlier.shape=8, outlier.size=4) +
labs(title="Pulse Rate for MASS data with different Smoke Habits", x="Smoke Habit", y = "Pulse rate")
#plot(Pulse ~ Smoke, data=surveyPulseSmoke , main="Pulse Rate for MASS data with different Smoke Habits", col=c("#ff0000","#00ff00","#0000ff","#ff00ff") )
anovaRes = aov(Pulse ~ Smoke, data=surveyPulseSmoke)
# This is the standard R-notation of entering an equation, y ~ x
# We will learn and use this more as it goes on.
anovaRes  # this does not give the easy-to-read result of the aov analysis
# Use the summary function instead.
# summary(anovaRes) # better yet, use the xkabledply() function.
names(anovaRes)
xkabledply(anovaRes, title = "ANOVA result summary")
tukeySmokeAoV <- TukeyHSD(anovaRes)
tukeySmokeAoV
# str(surveyPulseSmoke)
surveyPulseSmoke$Smoke <- factor(surveyPulseSmoke$Smoke, order=T, levels = c("Never","Occas","Regul","Heavy"))
# str(surveyPulseSmoke)
loadPkg("ggplot2")
ggplot(surveyPulseSmoke, aes(x=Smoke, y=Pulse)) +
geom_boxplot( colour=c("#ff0000","#11cc11","#0000ff","#ff00ff"), outlier.shape=8, outlier.size=4) +
labs(title="Pulse Rate for MASS data with different Smoke Habits", x="Smoke Habit", y = "Pulse rate")
#plot(Pulse ~ Smoke, data=surveyPulseSmoke , main="Pulse Rate for MASS data with different Smoke Habits", col=c("#00ff00","#0000ff","#ff00ff","#ff0000") )
anovaRes = aov(Pulse ~ Smoke, data=surveyPulseSmoke)
# anovaRes    # this does not give the easy-to-read result of the aov analysis
names(anovaRes)
# summary(anovaRes)
xkabledply(anovaRes) # same exact result with or without re-ordering.
# Some of common RMD options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
knitr::opts_chunk$set(results="markup", warning = F, message = F)
# Can globally set option for number display format.
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# The package "ezids" (EZ Intro to Data Science) includes some helper functions we developed for the course.
# Some of the frequently used functions are loadPkg(), xkabledply(), xkablesummary(), uzscale(), etc.
# You will need to install it (once) from GitHub.
# library(devtools)
# devtools::install_github("physicsland/ezids")
# Then load the package in your R session.
library(ezids)
library(ggplot2)
# Some of common RMD options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
knitr::opts_chunk$set(results="markup", warning = F, message = F)
# Can globally set option for number display format.
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# 1. Do not provide answers/comments inside code blocks (like here) -- those are notes between coders/self and will be ignored for grading.
# 2. Make sure your knitr options are set to include all results/code to be graded in the final document.
# 3. All charts/graphs/tables should have appropriate titles/labels/captions.
# 4. Compose your answers using inline R code instead of using the code-block output as much as you can.
# 5. Your grade is also determined by the style. Even if you answer everything correctly, but the .html does not look appealing, you will not get full credit. Pay attention to the details that we mentioned in class/homework and in previous sample .Rmd files. For example, how to use #, ##, ###, ..., bold face, italics, inline codes, tables, ..., {results = "asis"}, use of colors in plots/ggplots, and so forth.
reg <- read.csv('LogRegAdmit.csv')
reg$admit <- factor(reg$admit)
reg$rank <- factor(reg$rank)
reg_na <- outlierKD2(reg, gre, rm=TRUE, boxplt=FALSE, histogram=FALSE, qqplt=FALSE)
reg_na <- outlierKD2(reg_na, gpa, rm=TRUE, boxplt=FALSE, histogram=FALSE, qqplt=FALSE)
ad <- subset(reg_na, admit == 1)
rej <- subset(reg_na, admit == 0)
ad_hist_gre = ggplot(ad, aes(gre)) + geom_histogram(bins=50, col='grey', fill='green') + labs(title = "GRE of admitted students")
rej_hist_gre = ggplot(rej, aes(gre)) + geom_histogram(bins=50, col='grey', fill='blue') + labs(title = "GRE of rejected students")
ad_hist_gre
rej_hist_gre
ad_hist_gpa = ggplot(ad, aes(gpa)) + geom_histogram(bins=50, col='grey', fill='green') + labs(title = "GPA of admitted students")
rej_hist_gpa = ggplot(rej, aes(gpa)) + geom_histogram(bins=50, col='grey', fill='blue') + labs(title = "GPA of rejected students")
ad_hist_gpa
rej_hist_gpa
ad_qq_gre <- qqnorm(ad$gre, main="GRE scores of admitted students")
rej_qq_gre <- qqnorm(rej$gre, main="GRE scores of rejected students")
ad_qq_gpa <- qqnorm(ad$gpa, main="GPA scores of admitted students")
rej_qq_gpa <- qqnorm(rej$gpa, main="GPA scores of rejected students")
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
# The package "ezids" (EZ Intro to Data Science) includes a lot of the helper functions we developed for the course.
# Some of the frequently used functions are loadPkg(), xkabledply(), xkablesummary(), uzscale(), etc.
library(ezids)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
# getwd()
# mlb <- read.csv("BaseballHeightWeight.csv", header = TRUE)
# mlb <- data.frame(read.csv("BaseballHeightWeight.csv", header = TRUE))
mlb <- api_rfit("BaseballHeightWeight")
str(mlb)
head(mlb)
colnames(mlb)[4:6]=c("height","weight","age")
# The line above produces no output. To see the changes, use str() or head()
# The package "ezids" (EZ Intro to Data Science) includes a lot of the helper functions we developed for the course.
# Some of the frequently used functions are loadPkg(), xkabledply(), xkablesummary(), uzscale(), etc.
library(ezids)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
# getwd()
# mlb <- read.csv("BaseballHeightWeight.csv", header = TRUE)
# mlb <- data.frame(read.csv("BaseballHeightWeight.csv", header = TRUE))
mlb <- api_rfit("BaseballHeightWeight")
str(mlb)
head(mlb)
colnames(mlb)[4:6]=c("height","weight","age")
# The line above produces no output. To see the changes, use str() or head()
set.seed(13579) # just so that everyone have the same sample for comparison
mlbsample = mlb[ sample(nrow(mlb),30), ]
str(mlbsample)
head(mlbsample)
format(mean(mlbsample$height), digits=4)
format(mean(mlbsample$weight, na.rm = TRUE), digits=5)
loadPkg("BSDA") # for z.test
ztest95_2tail = z.test(x=mlbsample$height, mu=72.1, sigma.x = 2.31) #
ztest95_2tail
ztest95_right = z.test(x=mlbsample$height, mu=72.1, sigma.x = 2.31, alternative = "greater") #
ztest95_right
# ztest99 = z.test(x=mlbsample$height, mu=72.1, sigma.x = 2.31, conf.level=0.99 )
# ztest99
# ztest50 = z.test(x=mlbsample$height, mu=72.1, sigma.x = 2.31, conf.level=0.50 )
# ztest50
# force this one result to always show, regardless of global settings
ztest95_right
ztestrighttail = z.test(x=mlbsample$height, mu=72.1, sigma.x = 2.31, alternative = 'greater' )
ztestrighttail  # p-value is small, reject null, adopt alternative mu is greater than 73.2
ztest99lefttail = z.test(x=mlbsample$height, mu=72.1, sigma.x = 2.31, alternative = 'less' )
# ztest99lefttail  # p-value is large, fail to reject null, which is mu = 73.2 (or greater.)
unloadPkg("BSDA")
# force this one result to always show, regardless of global settings
ztest99lefttail
# t.test is included in the basic R package 'stats'
ttest95 = t.test(x=mlbsample$height, mu=72.1) # default conf.level = 0.95
# t.test(x=mlb$height, mu=73.2, sigma.x = 2.18, conf.level=0.99 )
ttest95
ttest99 = t.test(x=mlbsample$height, mu=72.1, conf.level=0.99 )
# ttest99
names(ttest99)
ttest99$conf.int
ttest99$alternative
ttest99$estimate
# force this one result to always show, regardless of global settings
ttest99
ttestrighttail = t.test(x=mlbsample$height, mu=72.1, alternative = 'greater' ) # conf.level=0.99,
ttestrighttail  # p-value is small, reject null, adopt alternative mu is greater than 73.2
ttestlefttail = t.test(x=mlbsample$height, mu=72.1, alternative = 'less' ) # conf.level=0.99,
# ttestlefttail  # p-value is large, fail to reject null, which is mu = 73.2 (or greater.)
# force this one result to always show, regardless of global settings
ttestlefttail
set.seed(999) # just so that everyone have the same sample for comparison
mlbsample2 = mlb[ sample(nrow(mlb),20), ]
# compare the two samples
format(mean(mlbsample2$height), digits=4)
format(mean(mlbsample2$weight, na.rm = TRUE), digits=5)
format(mean(mlbsample$height), digits=4)
format(mean(mlbsample$weight, na.rm = TRUE), digits=5)
ttest2sample_height = t.test(mlbsample$height,mlbsample2$height)
ttest2sample_height
ttest2sample_weight = t.test(mlbsample$weight,mlbsample2$weight)
ttest2sample_weight
# The package "ezids" (EZ Intro to Data Science) includes some helper functions we developed for the course.
# Some of the frequently used functions are loadPkg(), xkabledply(), xkablesummary(), uzscale(), etc.
# You will need to install it (once) from GitHub.
# library(devtools)
# devtools::install_github("physicsland/ezids")
# Then load the package in your R session.
library(ezids)
library(ggplot2)
# Some of common RMD options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
knitr::opts_chunk$set(results="markup", warning = F, message = F)
# Can globally set option for number display format.
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# 1. Do not provide answers/comments inside code blocks (like here) -- those are notes between coders/self and will be ignored for grading.
# 2. Make sure your knitr options are set to include all results/code to be graded in the final document.
# 3. All charts/graphs/tables should have appropriate titles/labels/captions.
# 4. Compose your answers using inline R code instead of using the code-block output as much as you can.
# 5. Your grade is also determined by the style. Even if you answer everything correctly, but the .html does not look appealing, you will not get full credit. Pay attention to the details that we mentioned in class/homework and in previous sample .Rmd files. For example, how to use #, ##, ###, ..., bold face, italics, inline codes, tables, ..., {results = "asis"}, use of colors in plots/ggplots, and so forth.
reg <- read.csv('LogRegAdmit.csv')
reg$admit <- factor(reg$admit)
reg$rank <- factor(reg$rank)
reg_na <- outlierKD2(reg, gre, rm=TRUE, boxplt=FALSE, histogram=FALSE, qqplt=FALSE)
reg_na <- outlierKD2(reg_na, gpa, rm=TRUE, boxplt=FALSE, histogram=FALSE, qqplt=FALSE)
ad <- subset(reg_na, admit == 1)
rej <- subset(reg_na, admit == 0)
ad_hist_gre = ggplot(ad, aes(gre)) + geom_histogram(bins=50, col='grey', fill='green') + labs(title = "GRE of admitted students")
rej_hist_gre = ggplot(rej, aes(gre)) + geom_histogram(bins=50, col='grey', fill='blue') + labs(title = "GRE of rejected students")
ad_hist_gre
rej_hist_gre
ad_hist_gpa = ggplot(ad, aes(gpa)) + geom_histogram(bins=50, col='grey', fill='green') + labs(title = "GPA of admitted students")
rej_hist_gpa = ggplot(rej, aes(gpa)) + geom_histogram(bins=50, col='grey', fill='blue') + labs(title = "GPA of rejected students")
ad_hist_gpa
rej_hist_gpa
ad_qq_gre <- qqnorm(ad$gre, main="GRE scores of admitted students")
rej_qq_gre <- qqnorm(rej$gre, main="GRE scores of rejected students")
ad_qq_gpa <- qqnorm(ad$gpa, main="GPA scores of admitted students")
rej_qq_gpa <- qqnorm(rej$gpa, main="GPA scores of rejected students")
ttest_ad_gre = t.test(x=ad$gre, mu=mean(ad$gre))
?mean
ad_gre_mean = mean(ad$gre)
ad_gre_mean
#ttest_ad_gre = t.test(x=ad$gre, mu=)
#ttest_ad_gre
ad_gre_mean = mean(rej$gre)
ad_gre_mean
#ttest_ad_gre = t.test(x=ad$gre, mu=)
#ttest_ad_gre
ad_gre_mean <- mean(rej$gre)
ad_gre_mean
#ttest_ad_gre = t.test(x=ad$gre, mu=)
#ttest_ad_gre
mean(rej$gre)
#ttest_ad_gre = t.test(x=ad$gre, mu=)
#ttest_ad_gre
mean(ad$gre)
#ttest_ad_gre = t.test(x=ad$gre, mu=)
#ttest_ad_gre
mean(ad$gpa)
#ttest_ad_gre = t.test(x=ad$gre, mu=)
#ttest_ad_gre
mean(ad$gre)
#ttest_ad_gre = t.test(x=ad$gre, mu=)
#ttest_ad_gre
View(ad)
View(ad)
mean(ad$gre, rm.na = TRUE)
#ttest_ad_gre = t.test(x=ad$gre, mu=)
#ttest_ad_gre
mean(ad$gre, na.rm = TRUE)
#ttest_ad_gre = t.test(x=ad$gre, mu=)
#ttest_ad_gre
ttest_ad_gre = t.test(x=ad$gre, mu=mean(ad$gre, na.rm = TRUE))
ttest_ad_gre
knitr::opts_chunk$set(echo = TRUE)
library(gssr)
library(gssrdoc)
library(ggplot2)
library(RColorBrewer)
gss_which_years(gss_all, region)
gss_which_years(gss_all, sex)
gss_which_years(gss_all, race)
gss_which_years(gss_all, age)
gss_which_years(gss_all, educ)
gss_which_years(gss_all, income)
?sex
knitr::opts_chunk$set(echo = TRUE)
library(gssr)
library(gssrdoc)
library(ggplot2)
library(RColorBrewer)
gss74 <- gss_get_yr(1974)
gss75 <- gss_get_yr(1975)
gss76 <- gss_get_yr(1976)
gss77 <- gss_get_yr(1977)
gss78 <- gss_get_yr(1978)
gss80 <- gss_get_yr(1980)
gss16 <- gss_get_yr(2016)
gss18 <- gss_get_yr(1918)
gss74 <- gss_get_yr(1974)
gss75 <- gss_get_yr(1975)
gss76 <- gss_get_yr(1976)
gss77 <- gss_get_yr(1977)
gss78 <- gss_get_yr(1978)
gss80 <- gss_get_yr(1980)
gss16 <- gss_get_yr(2016)
gss18 <- gss_get_yr(2018)
gss21 <- gss_get_yr(2021)
gss22 <- gss_get_yr(2020)
gss74 <- gss_get_yr(1974)
gss75 <- gss_get_yr(1975)
gss76 <- gss_get_yr(1976)
gss77 <- gss_get_yr(1977)
gss78 <- gss_get_yr(1978)
gss80 <- gss_get_yr(1980)
gss16 <- gss_get_yr(2016)
gss18 <- gss_get_yr(2018)
gss21 <- gss_get_yr(2021)
gss22 <- gss_get_yr(2022)
#common <- Reduce(intersect, list(colnames(gss75), colnames(gss76), colnames(gss77), colnames(gss78), colnames(gss80)))
gss74 <- gss_get_yr(1974)
gss75 <- gss_get_yr(1975)
gss76 <- gss_get_yr(1976)
gss77 <- gss_get_yr(1977)
gss78 <- gss_get_yr(1978)
gss80 <- gss_get_yr(1980)
gss16 <- gss_get_yr(2016)
gss18 <- gss_get_yr(2018)
gss21 <- gss_get_yr(2021)
gss22 <- gss_get_yr(2022)
gss_old <- Reduce(intersect, list(colnames(gss74), colnames(gss75), colnames(gss76), colnames(gss77), colnames(gss78), colnames(gss80)))
gss_old <- Reduce(intersect, list(colnames(gss74), colnames(gss75), colnames(gss76), colnames(gss77), colnames(gss78), colnames(gss80)))
#Install packages and load package.
install.packages('gssr', repos =
c('https://kjhealy.r-universe.dev', 'https://cloud.r-project.org'))
install.packages('gssrdoc', repos =
c('https://kjhealy.r-universe.dev', 'https://cloud.r-project.org'))
library(gssr)
#NEW INFO
#Let's say we were going to compare a range of 1975 to 1980 to the data avalible in 2018.
#We would need to call all of the years we will need.
#Older years:
gss74 <- gss_get_yr(1974)
gss75 <- gss_get_yr(1975)
gss76 <- gss_get_yr(1976)
gss77 <- gss_get_yr(1977)
gss78 <- gss_get_yr(1978)
gss80 <- gss_get_yr(1980)
#Newer years:
gss16 <- gss_get_yr(2016)
gss18 <- gss_get_yr(2018)
gss21 <- gss_get_yr(2021)
gss22 <- gss_get_yr(2022)
?sex
